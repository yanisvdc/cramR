% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cram_ml.R
\name{cram_ml}
\alias{cram_ml}
\title{CRAM ML}
\usage{
cram_ml(
  data,
  batch,
  formula = NULL,
  caret_params = NULL,
  parallelize_batch = FALSE,
  loss_name = "accuracy",
  custom_fit = NULL,
  custom_predict = NULL,
  custom_loss = NULL,
  alpha = 0.05
)
}
\arguments{
\item{data}{A matrix or data frame of covariates for each sample.}

\item{batch}{Either an integer specifying the number of batches (which will be created by random sampling) or a vector of length equal to the sample size providing the batch assignment (index) for each individual in the sample.}

\item{formula}{Optional formula relating the target to the predictors for supervised learning (NULL for unsupervised)}

\item{caret_params}{The model type for policy learning. Options include \code{"causal_forest"}, \code{"s_learner"}, and \code{"m_learner"}. Default is \code{"causal_forest"}.}

\item{parallelize_batch}{Logical. Whether to parallelize batch processing (i.e. the cram method learns T policies, with T the number of batches. They are learned in parallel when parallelize_batch is TRUE vs. learned sequentially using the efficient data.table structure when parallelize_batch is FALSE, recommended for light weight training). Defaults to \code{FALSE}.}

\item{custom_fit}{A custom, user-defined, function that outputs a fitted model given training data (allows flexibility). Defaults to \code{NULL}.}

\item{custom_predict}{A custom, user-defined, function for making predictions given a fitted model and test data (allow flexibility). Defaults to \code{NULL}.}

\item{custom_loss}{A custom loss}

\item{alpha}{Significance level for confidence intervals. Default is 0.05 (95\% confidence).}
}
\value{
A list containing:
\itemize{
  \item \code{raw_results}: A data frame summarizing key metrics with truncated decimals:
    \itemize{
      \item \code{Delta Estimate}: The estimated treatment effect (delta).
      \item \code{Delta Standard Error}: The standard error of the delta estimate.
      \item \code{Delta CI Lower}: The lower bound of the confidence interval for delta.
      \item \code{Delta CI Upper}: The upper bound of the confidence interval for delta.
      \item \code{Policy Value Estimate}: The estimated policy value.
      \item \code{Policy Value Standard Error}: The standard error of the policy value estimate.
      \item \code{Policy Value CI Lower}: The lower bound of the confidence interval for policy value.
      \item \code{Policy Value CI Upper}: The upper bound of the confidence interval for policy value.
      \item \code{Proportion Treated}: The proportion of individuals treated under the final policy.
    }
  \item \code{interactive_table}: An interactive table summarizing key metrics for detailed exploration.
  \item \code{final_policy_model}: The final fitted policy model based on \code{model_type} and \code{learner_type} or \code{custom_fit}.
}
}
\description{
This function performs the cram method (simultaneous ML learning and evaluation)
on experimental or observational data, for which the data generation process is unknown.
}
\examples{
# Example data
X_data <- matrix(rnorm(100 * 5), nrow = 100, ncol = 5)
D_data <- D_data <- as.integer(sample(c(0, 1), 100, replace = TRUE))
Y_data <- rnorm(100)
nb_batch <- 5

# Perform CRAM policy
result <- cram_policy(X = X_data,
                          D = D_data,
                          Y = Y_data,
                          batch = nb_batch)

# Access results
result$raw_results
result$interactive_table
result$final_policy_model
}
\seealso{
\code{\link[grf]{causal_forest}}, \code{\link[glmnet]{cv.glmnet}}, \code{\link[keras]{keras_model_sequential}}
}
