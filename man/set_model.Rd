% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_model.R
\name{set_model}
\alias{set_model}
\title{Set the Model Based on Type and Learner}
\usage{
set_model(model_type, learner_type, model_params)
}
\arguments{
\item{model_type}{A string specifying the model type. Supported options are \code{"causal_forest"}, \code{"s_learner"}, \code{"m_learner"}.}

\item{learner_type}{A string specifying the learner type. Supported options depend on \code{model_type}.
For example, \code{"ridge"} and \code{"fnn"} are supported learners for \code{"s_learner"}.}

\item{model_params}{A list of named parameters to configure the model. The structure of \code{model_params} varies depending on the \code{learner_type}.
For FNNs, the following structure is used:
\describe{
  \item{\code{input_layer}}{A list defining the input layer. Must include:
    \describe{
      \item{\code{units}}{Number of units in the input layer.}
      \item{\code{activation}}{Activation function for the input layer.}
      \item{\code{input_shape}}{Input shape for the layer.}
    }
  }
  \item{\code{layers}}{A list of lists, where each sublist specifies a hidden layer with:
    \describe{
      \item{\code{units}}{Number of units in the layer.}
      \item{\code{activation}}{Activation function for the layer.}
    }
  }
  \item{\code{output_layer}}{A list defining the output layer. Must include:
    \describe{
      \item{\code{units}}{Number of units in the output layer.}
      \item{\code{activation}}{Activation function for the output layer (e.g., \code{"linear"} or \code{"sigmoid"}).}
    }
  }
  \item{\code{compile_args}}{A list of arguments for compiling the model. Must include:
    \describe{
      \item{\code{optimizer}}{Optimizer for training (e.g., \code{"adam"} or \code{"sgd"}).}
      \item{\code{loss}}{Loss function (e.g., \code{"mse"} or \code{"binary_crossentropy"}).}
      \item{\code{metrics}}{Optional list of metrics for evaluation (e.g., \code{c("accuracy")}).}
    }
  }
}
For other learners (e.g., \code{"ridge"} or \code{"causal_forest"}), \code{model_params} can include relevant hyperparameters.}
}
\value{
The instantiated model object or the corresponding model function.
}
\description{
This function maps the model type and learner type to the corresponding model function. For Feedforward Neural Networks (FNNs),
it provides flexibility to configure the input layer, hidden layers, output layer, and compilation arguments using the \code{model_params} argument.
}
\examples{
# Example: Causal Forest with default parameters
set_model("causal_forest", NULL, model_params = list(num.trees = 100))

# Example: Ridge regression for S-learner
set_model("s_learner", "ridge")

# Example: FNN for S-learner with custom layers and compile settings
set_model("s_learner", "fnn", model_params = list(
  input_layer = list(units = 128, activation = "relu", input_shape = ncol(X) + 1),
  layers = list(
    list(units = 64, activation = "relu"),
    list(units = 32, activation = "tanh")
  ),
  output_layer = list(units = 1, activation = "sigmoid"),
  compile_args = list(optimizer = "sgd", loss = "binary_crossentropy", metrics = c("accuracy"))
))

}
